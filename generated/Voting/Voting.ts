// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ArchivePastElection extends ethereum.Event {
  get params(): ArchivePastElection__Params {
    return new ArchivePastElection__Params(this);
  }
}

export class ArchivePastElection__Params {
  _event: ArchivePastElection;

  constructor(event: ArchivePastElection) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winnerName(): string {
    return this._event.parameters[1].value.toString();
  }

  get voteCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winnerAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class RegisterCandidate extends ethereum.Event {
  get params(): RegisterCandidate__Params {
    return new RegisterCandidate__Params(this);
  }
}

export class RegisterCandidate__Params {
  _event: RegisterCandidate;

  constructor(event: RegisterCandidate) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get candidateId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class StartElection extends ethereum.Event {
  get params(): StartElection__Params {
    return new StartElection__Params(this);
  }
}

export class StartElection__Params {
  _event: StartElection;

  constructor(event: StartElection) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get registrationEndPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get votingEndPeriod(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VoteForCandidate extends ethereum.Event {
  get params(): VoteForCandidate__Params {
    return new VoteForCandidate__Params(this);
  }
}

export class VoteForCandidate__Params {
  _event: VoteForCandidate;

  constructor(event: VoteForCandidate) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get candidateId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get voteCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Voting__candidatesResult {
  value0: Address;
  value1: BigInt;
  value2: string;

  constructor(value0: Address, value1: BigInt, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }
}

export class Voting__getLiveResultsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: BigInt;

  constructor(value0: Array<Address>, value1: Array<BigInt>, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Voting__getWinnerResultsResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class Voting__votersResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Voting extends ethereum.SmartContract {
  static bind(address: Address): Voting {
    return new Voting("Voting", address);
  }

  candidates(param0: BigInt): Voting__candidatesResult {
    let result = super.call(
      "candidates",
      "candidates(uint256):(address,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Voting__candidatesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toString()
    );
  }

  try_candidates(
    param0: BigInt
  ): ethereum.CallResult<Voting__candidatesResult> {
    let result = super.tryCall(
      "candidates",
      "candidates(uint256):(address,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Voting__candidatesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toString()
      )
    );
  }

  electionId(): BigInt {
    let result = super.call("electionId", "electionId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_electionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("electionId", "electionId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiveResults(): Voting__getLiveResultsResult {
    let result = super.call(
      "getLiveResults",
      "getLiveResults():(address[],uint256[],uint256)",
      []
    );

    return new Voting__getLiveResultsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt()
    );
  }

  try_getLiveResults(): ethereum.CallResult<Voting__getLiveResultsResult> {
    let result = super.tryCall(
      "getLiveResults",
      "getLiveResults():(address[],uint256[],uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Voting__getLiveResultsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt()
      )
    );
  }

  getWinnerResults(): Voting__getWinnerResultsResult {
    let result = super.call(
      "getWinnerResults",
      "getWinnerResults():(uint256,bool)",
      []
    );

    return new Voting__getWinnerResultsResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getWinnerResults(): ethereum.CallResult<Voting__getWinnerResultsResult> {
    let result = super.tryCall(
      "getWinnerResults",
      "getWinnerResults():(uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Voting__getWinnerResultsResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  locked(): boolean {
    let result = super.call("locked", "locked():(bool)", []);

    return result[0].toBoolean();
  }

  try_locked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("locked", "locked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registeredCandidates(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "registeredCandidates",
      "registeredCandidates(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_registeredCandidates(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registeredCandidates",
      "registeredCandidates(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registrationEndPeriod(): BigInt {
    let result = super.call(
      "registrationEndPeriod",
      "registrationEndPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_registrationEndPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registrationEndPeriod",
      "registrationEndPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  voters(param0: Address, param1: BigInt): Voting__votersResult {
    let result = super.call(
      "voters",
      "voters(address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Voting__votersResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_voters(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Voting__votersResult> {
    let result = super.tryCall(
      "voters",
      "voters(address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Voting__votersResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  votingEndPeriod(): BigInt {
    let result = super.call(
      "votingEndPeriod",
      "votingEndPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_votingEndPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingEndPeriod",
      "votingEndPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DestroyContractCall extends ethereum.Call {
  get inputs(): DestroyContractCall__Inputs {
    return new DestroyContractCall__Inputs(this);
  }

  get outputs(): DestroyContractCall__Outputs {
    return new DestroyContractCall__Outputs(this);
  }
}

export class DestroyContractCall__Inputs {
  _call: DestroyContractCall;

  constructor(call: DestroyContractCall) {
    this._call = call;
  }
}

export class DestroyContractCall__Outputs {
  _call: DestroyContractCall;

  constructor(call: DestroyContractCall) {
    this._call = call;
  }
}

export class RegisterCandidateCall extends ethereum.Call {
  get inputs(): RegisterCandidateCall__Inputs {
    return new RegisterCandidateCall__Inputs(this);
  }

  get outputs(): RegisterCandidateCall__Outputs {
    return new RegisterCandidateCall__Outputs(this);
  }
}

export class RegisterCandidateCall__Inputs {
  _call: RegisterCandidateCall;

  constructor(call: RegisterCandidateCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RegisterCandidateCall__Outputs {
  _call: RegisterCandidateCall;

  constructor(call: RegisterCandidateCall) {
    this._call = call;
  }
}

export class StartElectionCall extends ethereum.Call {
  get inputs(): StartElectionCall__Inputs {
    return new StartElectionCall__Inputs(this);
  }

  get outputs(): StartElectionCall__Outputs {
    return new StartElectionCall__Outputs(this);
  }
}

export class StartElectionCall__Inputs {
  _call: StartElectionCall;

  constructor(call: StartElectionCall) {
    this._call = call;
  }

  get _registrationEndPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _votingEndPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StartElectionCall__Outputs {
  _call: StartElectionCall;

  constructor(call: StartElectionCall) {
    this._call = call;
  }
}

export class UpdateTimeCall extends ethereum.Call {
  get inputs(): UpdateTimeCall__Inputs {
    return new UpdateTimeCall__Inputs(this);
  }

  get outputs(): UpdateTimeCall__Outputs {
    return new UpdateTimeCall__Outputs(this);
  }
}

export class UpdateTimeCall__Inputs {
  _call: UpdateTimeCall;

  constructor(call: UpdateTimeCall) {
    this._call = call;
  }

  get _registrationEndPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _votingEndPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateTimeCall__Outputs {
  _call: UpdateTimeCall;

  constructor(call: UpdateTimeCall) {
    this._call = call;
  }
}

export class VoteForCandidateCall extends ethereum.Call {
  get inputs(): VoteForCandidateCall__Inputs {
    return new VoteForCandidateCall__Inputs(this);
  }

  get outputs(): VoteForCandidateCall__Outputs {
    return new VoteForCandidateCall__Outputs(this);
  }
}

export class VoteForCandidateCall__Inputs {
  _call: VoteForCandidateCall;

  constructor(call: VoteForCandidateCall) {
    this._call = call;
  }

  get _candidateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VoteForCandidateCall__Outputs {
  _call: VoteForCandidateCall;

  constructor(call: VoteForCandidateCall) {
    this._call = call;
  }
}
